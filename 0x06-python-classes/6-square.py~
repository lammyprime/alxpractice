#!/usr/bin/python3
""" Initializes with size"""


class Square:
    """Square Docstring"""

    def __init__(self, size=0, position=(0, 0)):
        """Initializes size as a private attribute"""
        if not isinstance(size, int):
            raise TypeError("size must be an integer")
        if size < 0:
            raise ValueError("size must be >= 0")
        self.__size = size
    def my_print(self):
        """Prints the square with # character"""
        for i in range(self.__size):
            print('#' * self.__size)
        if self.__size == 0:
            print()

    @property
    def position(self):
        """Retrieves the position private attribute"""
        return self.__position
    @position.setter
    def position(self, value):
        """Sets the size of the current attribute"""
        if not isinstance(value, tuple):
            raise TypeError("position must be a tuple of 2 positive integers")
        if not isinstance(value[0], int):
            raise TypeError("position must be a tuple of 2 positive integers")
        if not isinstance(value[1], int):
            raise TypeError("position must be a tuple of 2 positive integers")
        self.__position = value
    def my_print(self):
        """Prints the square with # character"""
        for i in range(self.__size):
            print('#' * self.__size)
        if self.__size == 0:
            print()
            
